services:
  postgres:
    image: postgres:16-alpine
    container_name: store-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: store_db
      POSTGRES_USER: store_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-StrongPassword123!}
      POSTGRES_MULTIPLE_DATABASES: store_identity_db,store_product_db,store_cart_db,store_order_db,store_audit_db
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./Infrastructure/scripts/init-databases.sql:/docker-entrypoint-initdb.d/02-init-databases.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U store_user -d store_db"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - store-network

  redis:
    image: redis:7-alpine
    container_name: store-redis
    restart: unless-stopped
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --requirepass "${REDIS_PASSWORD:-}"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s
    networks:
      - store-network

  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: store-rabbitmq
    restart: unless-stopped
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER:-store_user}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD:-StrongPassword123!}
    ports:
      - "${RABBITMQ_PORT:-5672}:5672"
      - "${RABBITMQ_MANAGEMENT_PORT:-15672}:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - store-network

  # AuditLog Service - MUST be started first before other services
  auditlogservice:
    build:
      context: .
      dockerfile: Services/AuditLogService/Dockerfile
    container_name: store-auditlogservice
    restart: unless-stopped
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:5004
      - ConnectionStrings__DefaultConnection=Host=postgres;Database=store_audit_db;Username=store_user;Password=${POSTGRES_PASSWORD:-StrongPassword123!};Port=5432
      - ConnectionStrings__Redis=redis:6379
      - JwtSettings__SecretKey=${JWT_SECRET_KEY:-your-very-long-secret-key-here-at-least-32-characters-long-for-store-app}
      - JwtSettings__Issuer=Store.API
      - JwtSettings__Audience=Store.Client
    ports:
      - "5004:5004"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5004/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - store-network

  # Identity Service
  identityservice:
    build:
      context: .
      dockerfile: Services/IdentityService/Dockerfile
    container_name: store-identityservice
    restart: unless-stopped
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:5001
      - ConnectionStrings__DefaultConnection=Host=postgres;Database=store_identity_db;Username=store_user;Password=${POSTGRES_PASSWORD:-StrongPassword123!};Port=5432
      - ConnectionStrings__Redis=redis:6379
      - JwtSettings__SecretKey=${JWT_SECRET_KEY:-your-very-long-secret-key-here-at-least-32-characters-long-for-store-app}
      - JwtSettings__Issuer=Store.API
      - JwtSettings__Audience=Store.Client
      - JwtSettings__Authority=https://localhost:5001
      - Services__AuditLogService__BaseUrl=http://auditlogservice:5004
      - TRUE_ADMIN_EMAIL=trueadmin@store.com
      - TRUE_ADMIN_PASSWORD=${TRUE_ADMIN_PASSWORD:-SecurePassword123!}
    ports:
      - "5001:5001"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      auditlogservice:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - store-network

  # Product Service
  productservice:
    build:
      context: .
      dockerfile: Services/ProductService/Dockerfile
    container_name: store-productservice
    restart: unless-stopped
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:5003
      - ConnectionStrings__DefaultConnection=Host=postgres;Database=store_product_db;Username=store_user;Password=${POSTGRES_PASSWORD:-StrongPassword123!};Port=5432
      - ConnectionStrings__Redis=redis:6379
      - JwtSettings__SecretKey=${JWT_SECRET_KEY:-your-very-long-secret-key-here-at-least-32-characters-long-for-store-app}
      - JwtSettings__Issuer=Store.API
      - JwtSettings__Audience=Store.Client
      - Services__AuditLogService__BaseUrl=http://auditlogservice:5004
      - Services__IdentityService=http://identityservice:5001
      - RabbitMQ__HostName=rabbitmq
      - RabbitMQ__Port=5672
      - RabbitMQ__UserName=${RABBITMQ_USER:-store_user}
      - RabbitMQ__Password=${RABBITMQ_PASSWORD:-StrongPassword123!}
      - RabbitMQ__VirtualHost=/
      - RabbitMQ__ExchangeName=store_events
    ports:
      - "5003:5003"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      auditlogservice:
        condition: service_healthy
      identityservice:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5003/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - store-network

  # Cart Service
  cartservice:
    build:
      context: .
      dockerfile: Services/CartService/Dockerfile
    container_name: store-cartservice
    restart: unless-stopped
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:5005
      - ConnectionStrings__DefaultConnection=Host=postgres;Database=store_cart_db;Username=store_user;Password=${POSTGRES_PASSWORD:-StrongPassword123!};Port=5432
      - ConnectionStrings__Redis=redis:6379
      - JwtSettings__SecretKey=${JWT_SECRET_KEY:-your-very-long-secret-key-here-at-least-32-characters-long-for-store-app}
      - JwtSettings__Issuer=Store.API
      - JwtSettings__Audience=Store.Client
      - Services__AuditLogService__BaseUrl=http://auditlogservice:5004
      - Services__IdentityService=http://identityservice:5001
      - Services__ProductService=http://productservice:5003
      - RabbitMQ__HostName=rabbitmq
      - RabbitMQ__Port=5672
      - RabbitMQ__UserName=${RABBITMQ_USER:-store_user}
      - RabbitMQ__Password=${RABBITMQ_PASSWORD:-StrongPassword123!}
      - RabbitMQ__VirtualHost=/
      - RabbitMQ__ExchangeName=store_events
    ports:
      - "5005:5005"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      auditlogservice:
        condition: service_healthy
      identityservice:
        condition: service_healthy
      productservice:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5005/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - store-network

  # Order Service
  orderservice:
    build:
      context: .
      dockerfile: Services/OrderService/Dockerfile
    container_name: store-orderservice
    restart: unless-stopped
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:5006
      - ConnectionStrings__DefaultConnection=Host=postgres;Database=store_order_db;Username=store_user;Password=${POSTGRES_PASSWORD:-StrongPassword123!};Port=5432
      - ConnectionStrings__Redis=redis:6379
      - JwtSettings__SecretKey=${JWT_SECRET_KEY:-your-very-long-secret-key-here-at-least-32-characters-long-for-store-app}
      - JwtSettings__Issuer=Store.API
      - JwtSettings__Audience=Store.Client
      - Services__AuditLogService__BaseUrl=http://auditlogservice:5004
      - Services__IdentityService=http://identityservice:5001
      - Services__ProductService=http://productservice:5003
      - Services__CartService=http://cartservice:5005
      - RabbitMQ__HostName=rabbitmq
      - RabbitMQ__Port=5672
      - RabbitMQ__UserName=${RABBITMQ_USER:-store_user}
      - RabbitMQ__Password=${RABBITMQ_PASSWORD:-StrongPassword123!}
      - RabbitMQ__VirtualHost=/
      - RabbitMQ__ExchangeName=store_events
    ports:
      - "5006:5006"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      auditlogservice:
        condition: service_healthy
      identityservice:
        condition: service_healthy
      productservice:
        condition: service_healthy
      cartservice:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5006/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - store-network

  # API Gateway
  gateway:
    build:
      context: .
      dockerfile: Gateway/APIGateway/Dockerfile
    container_name: store-gateway
    restart: unless-stopped
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:5000
      - ConnectionStrings__Redis=redis:6379
      - JwtSettings__SecretKey=${JWT_SECRET_KEY:-your-very-long-secret-key-here-at-least-32-characters-long-for-store-app}
      - JwtSettings__Issuer=Store.API
      - JwtSettings__Audience=Store.Client
      - RabbitMQ__HostName=rabbitmq
      - RabbitMQ__Port=5672
      - RabbitMQ__UserName=${RABBITMQ_USER:-store_user}
      - RabbitMQ__Password=${RABBITMQ_PASSWORD:-StrongPassword123!}
      - RabbitMQ__VirtualHost=/
      - RabbitMQ__ExchangeName=store_events
      - ServiceUrls__IdentityService=http://identityservice:5001
      - ServiceUrls__ProductService=http://productservice:5003
      - ServiceUrls__CartService=http://cartservice:5005
      - ServiceUrls__OrderService=http://orderservice:5006
      - ServiceUrls__AuditService=http://auditlogservice:5004
    ports:
      - "5000:5000"
    depends_on:
      identityservice:
        condition: service_healthy
      productservice:
        condition: service_healthy
      cartservice:
        condition: service_healthy
      orderservice:
        condition: service_healthy
      auditlogservice:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 90s
    networks:
      - store-network

  # Optional: PgAdmin for database management
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: store-pgadmin
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL:-admin@store-app.com}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD:-admin123}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "${PGADMIN_PORT:-8080}:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      - postgres
    networks:
      - store-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  rabbitmq_data:
    driver: local
  pgadmin_data:
    driver: local

networks:
  store-network:
    driver: bridge
    name: store-network
