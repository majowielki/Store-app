version: '3.8'

services:
  # Databases
  postgres:
    image: postgres:16
    container_name: store-postgres
    environment:
      POSTGRES_DB: store_main
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres123
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./Infrastructure/scripts/init-databases.sql:/docker-entrypoint-initdb.d/init-databases.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - store-network

  redis:
    image: redis:7-alpine
    container_name: store-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - store-network

  # Microservices
  identity-service:
    image: store-identity-service:latest
    container_name: store-identity-service
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:8080
      - ConnectionStrings__DefaultConnection=Host=postgres;Database=store_identity_db;Username=postgres;Password=postgres123
      - ConnectionStrings__Redis=redis:6379
    ports:
      - "5001:8080"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health", "||", "exit", "1"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - store-network

  product-service:
    image: store-product-service:latest
    container_name: store-product-service
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:8080
      - ConnectionStrings__DefaultConnection=Host=postgres;Database=store_product_db;Username=postgres;Password=postgres123
      - ConnectionStrings__Redis=redis:6379
    ports:
      - "5002:8080"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health", "||", "exit", "1"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - store-network

  cart-service:
    image: store-cart-service:latest
    container_name: store-cart-service
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:8080
      - ConnectionStrings__DefaultConnection=Host=postgres;Database=store_cart_db;Username=postgres;Password=postgres123
      - ConnectionStrings__Redis=redis:6379
    ports:
      - "5003:8080"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health", "||", "exit", "1"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - store-network

  order-service:
    image: store-order-service:latest
    container_name: store-order-service
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:8080
      - ConnectionStrings__DefaultConnection=Host=postgres;Database=store_order_db;Username=postgres;Password=postgres123
      - ConnectionStrings__Redis=redis:6379
    ports:
      - "5004:8080"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health", "||", "exit", "1"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - store-network

  audit-service:
    image: store-audit-service:latest
    container_name: store-audit-service
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:8080
      - ConnectionStrings__DefaultConnection=Host=postgres;Database=store_audit_db;Username=postgres;Password=postgres123
      - ConnectionStrings__Redis=redis:6379
    ports:
      - "5005:8080"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health", "||", "exit", "1"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - store-network

  gateway-service:
    image: store-gateway-service:latest
    container_name: store-gateway-service
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:8080
      - Services__IdentityService=http://identity-service:8080
      - Services__ProductService=http://product-service:8080
      - Services__CartService=http://cart-service:8080
      - Services__OrderService=http://order-service:8080
      - Services__AuditService=http://audit-service:8080
    ports:
      - "5000:8080"
    depends_on:
      identity-service:
        condition: service_healthy
      product-service:
        condition: service_healthy
      cart-service:
        condition: service_healthy
      order-service:
        condition: service_healthy
      audit-service:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health", "||", "exit", "1"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - store-network

volumes:
  postgres_data:
  redis_data:

networks:
  store-network:
    driver: bridge