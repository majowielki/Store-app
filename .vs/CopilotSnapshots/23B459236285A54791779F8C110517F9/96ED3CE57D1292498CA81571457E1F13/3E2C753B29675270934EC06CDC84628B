using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Authorization;
using Store.ProductService.Services;
using Store.Shared.DTOs;
using Store.Shared.Models;
using System.Security.Claims;

namespace Store.ProductService.Controllers;

[ApiController]
[Route("api/[controller]")]
public class ProductsController : ControllerBase
{
    private readonly IProductService _productService;

    public ProductsController(IProductService productService)
    {
        _productService = productService;
    }

    [HttpGet]
    public async Task<ActionResult<ApiResponse<PaginationResponse<Product>>>> GetProducts([FromQuery] PaginationParams parameters)
    {
        var result = await _productService.GetProductsAsync(parameters);
        return Ok(new ApiResponse<PaginationResponse<Product>>
        {
            Success = true,
            Data = result,
            Message = "Products retrieved successfully"
        });
    }

    [HttpGet("{id}")]
    public async Task<ActionResult<ApiResponse<Product>>> GetProduct(int id)
    {
        var product = await _productService.GetProductByIdAsync(id);
        if (product == null)
        {
            return NotFound(new ApiResponse<Product>
            {
                Success = false,
                Message = "Product not found"
            });
        }

        return Ok(new ApiResponse<Product>
        {
            Success = true,
            Data = product,
            Message = "Product retrieved successfully"
        });
    }

    [HttpGet("featured")]
    public async Task<ActionResult<ApiResponse<List<Product>>>> GetFeaturedProducts()
    {
        var products = await _productService.GetFeaturedProductsAsync();
        return Ok(new ApiResponse<List<Product>>
        {
            Success = true,
            Data = products,
            Message = "Featured products retrieved successfully"
        });
    }

    [HttpGet("categories")]
    public async Task<ActionResult<ApiResponse<List<string>>>> GetCategories()
    {
        var categories = await _productService.GetCategoriesAsync();
        return Ok(new ApiResponse<List<string>>
        {
            Success = true,
            Data = categories,
            Message = "Categories retrieved successfully"
        });
    }

    [HttpGet("companies")]
    public async Task<ActionResult<ApiResponse<List<string>>>> GetCompanies()
    {
        var companies = await _productService.GetCompaniesAsync();
        return Ok(new ApiResponse<List<string>>
        {
            Success = true,
            Data = companies,
            Message = "Companies retrieved successfully"
        });
    }

    [HttpPost]
    [Authorize(Roles = "admin")]
    public async Task<ActionResult<ApiResponse<Product>>> CreateProduct([FromBody] Product product)
    {
        var createdProduct = await _productService.CreateProductAsync(product);
        return CreatedAtAction(nameof(GetProduct), new { id = createdProduct.Id },
            new ApiResponse<Product>
            {
                Success = true,
                Data = createdProduct,
                Message = "Product created successfully"
            });
    }

    [HttpPut("{id}")]
    [Authorize(Roles = "admin")]
    public async Task<ActionResult<ApiResponse<Product>>> UpdateProduct(int id, [FromBody] Product product)
    {
        var updatedProduct = await _productService.UpdateProductAsync(id, product);
        if (updatedProduct == null)
        {
            return NotFound(new ApiResponse<Product>
            {
                Success = false,
                Message = "Product not found"
            });
        }

        return Ok(new ApiResponse<Product>
        {
            Success = true,
            Data = updatedProduct,
            Message = "Product updated successfully"
        });
    }

    [HttpDelete("{id}")]
    [Authorize(Roles = "admin")]
    public async Task<ActionResult<ApiResponse<object>>> DeleteProduct(int id)
    {
        var result = await _productService.DeleteProductAsync(id);
        if (!result)
        {
            return NotFound(new ApiResponse<object>
            {
                Success = false,
                Message = "Product not found"
            });
        }

        return Ok(new ApiResponse<object>
        {
            Success = true,
            Message = "Product deleted successfully"
        });
    }

    private string? GetUserId()
    {
        return User.FindFirst(ClaimTypes.NameIdentifier)?.Value;
    }

    private string? GetUserEmail()
    {
        return User.FindFirst(ClaimTypes.Email)?.Value;
    }
}
